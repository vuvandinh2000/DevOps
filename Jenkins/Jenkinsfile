def COLOR_MAP = [
    'SUCCESS': 'good',
    'FAILURE': 'danger',
]

// PaaC: Pipeline as a Code
pipeline {
    // Jenkins sd co che Master-Slave, any de chi rang co the chay o bat ky dau
    // Mac dinh: Jenkins chay tren master
    agent any
    tools {
        // Cac bien duoc config trong Manage Jenkins -> Tools
        maven "MAVEN3"
        jdk   "OracleJDK11"
    }

    stages {
        stage('Fetch Code') {
            steps {
                // Nhieu params cua 1 plugin thi cach nhau boi dau ,
                git branch: 'main', url: 'https://github.com/hkhcoder/vprofile-project.git'
            }
        }

        stage('Build') {
            steps {
                sh 'mvn install -DskipTests'
            }

            // if job successful
            post {
                success {
                    echo 'Archiving artifacts now.'
                    // plugin de archive cac artifact
                    archiveArtifacts artifacts: '**/*.war'
                }
            }
        }

        stage('Test') {
            steps {
                sh 'mvn test'
            }
        }

        stage('Checkstyle Analysis') {
            steps {
                sh 'mvn checkstyle:checkstyle'
            }
        }

        stage('Sonar Analysis') {
            environment {
                // bien khai bao trong Manage Jenkins -> Tools
                scannerHome = tool 'sonar4.8'
            }
            steps {
                withSonarQubeEnv('sonar') {
                    sh '''${scannerHome}/bin/sonar-scanner -Dsonar.projectKey=vprofile \
                    -Dsonar.projectName=vprofile \
                    -Dsonar.projectVersion=1.0 \
                    -Dsonar.sources=src/ \
                    -Dsonar.java.binaries=target/test-classes/com/visualpathit/account/controllerTest/ \
                    -Dsonar.junit.reportsPath=target/surefire-reports/ \
                    -Dsonar.jacoco.reportsPath=target/jacoco.exec \
                    -Dsonar.java.checkstyle.reportPaths=target/checkstyle-result.xml'''
                }
            }
        }

        stage('Quality Gate') {
            steps {
                timeout(time: 1, unit: 'HOURS') {
                    // Parameter indicates whether to set pipeline to UNSTABLE if Quality Gate fails
                    // true = set pipeline to UNSTABLE, false = don't
                    waitForQualityGate abortPipeline: true
                }
            }
        }

        stage('Upload Artifact') {
            steps {
                nexusArtifactUploader(
                    nexusVersion: 'nexus3',
                    protocol: 'http',
                    nexusUrl: '172.31.13.123:8081',
                    groupId: 'QA', // Nexus se luu cac artifact vao folder ten la QA
                    version: "${env.BUILD_ID}-${env.BUILD_TIMESTAMP}",
                    repository: 'vprofile-repo', // repo-name in Nexus Server
                    credentialsId: 'nexuslogin', // id cua username/password dang nhap Nexus duoc luu trong config cua Jenkins
                    // Manage Jenkins -> Credentials
                    artifacts: [
                        // duong dan den artifact ma Jenkins tao ra sau khi build xong
                        [artifactId: 'vproapp',
                        classifier: '',
                        file: 'target/vprofile-v2.war',
                        type: 'war']
                    ]
                )
            }

            post {
                always {
                    echo 'Slack Notifications.'
                    // slackSend la plugin Slack Notification da installed
                    slackSend channel: '#jenkinscicd', // ten channel tren Slack
                    color: COLOR_MAP[currentBuild.currentResult], // ccrBuild.crrResult -> [SUCCESS, UNSTABLE, FAILURE]
                    message: "*${currentBuild.currentResult}:* Job ${env.JOB_NAME} build ${env.BUILD_NUMBER} \n More info at: ${env.BUILD_URL}"
                }
            }
        }
    }
}